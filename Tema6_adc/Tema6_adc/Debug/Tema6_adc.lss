
Tema6_adc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000338  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002c4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800100  00800100  00000338  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000338  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000368  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  000003a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000870  00000000  00000000  00000400  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006c1  00000000  00000000  00000c70  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000031c  00000000  00000000  00001331  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b4  00000000  00000000  00001650  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003bb  00000000  00000000  00001704  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000081  00000000  00000000  00001abf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00001b40  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a3 30       	cpi	r26, 0x03	; 3
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 bd 00 	call	0x17a	; 0x17a <main>
  88:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <port_init>:
	sei();
}

void port_init(void)
{
	DDRB  = 0xFF;
  90:	8f ef       	ldi	r24, 0xFF	; 255
  92:	84 b9       	out	0x04, r24	; 4
	PORTB  = 0x00;
  94:	15 b8       	out	0x05, r1	; 5

	DDRC  = 0x00;
  96:	17 b8       	out	0x07, r1	; 7
	PORTC = 0x00;
  98:	18 b8       	out	0x08, r1	; 8
  9a:	08 95       	ret

0000009c <adc_init>:


void adc_init(void){
	
	//reset ADC registers
	ADMUX = 0x00;
  9c:	ac e7       	ldi	r26, 0x7C	; 124
  9e:	b0 e0       	ldi	r27, 0x00	; 0
  a0:	1c 92       	st	X, r1
	ADCSRA = 0x00;
  a2:	ea e7       	ldi	r30, 0x7A	; 122
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	10 82       	st	Z, r1
	
	//set the reference voltage to Avcc
	ADMUX |=  (1 << REFS0); // Set REFS0 bit to 1
  a8:	8c 91       	ld	r24, X
  aa:	80 64       	ori	r24, 0x40	; 64
  ac:	8c 93       	st	X, r24
	ADMUX &= ~(1 << REFS1); // Set REFS1 bit to 0
  ae:	8c 91       	ld	r24, X
  b0:	8f 77       	andi	r24, 0x7F	; 127
  b2:	8c 93       	st	X, r24
	ADMUX &=  ~(1 << ADLAR); // Set ADLAR bit to 0(left adjust the result)
  b4:	8c 91       	ld	r24, X
  b6:	8f 7d       	andi	r24, 0xDF	; 223
  b8:	8c 93       	st	X, r24
	
	//disable analog comparator
	ACSR |= (1 << ACD); // Set ACD bit(from ACSR) to 1 to disable the Analog Comparator
  ba:	80 b7       	in	r24, 0x30	; 48
  bc:	80 68       	ori	r24, 0x80	; 128
  be:	80 bf       	out	0x30, r24	; 48
	
	//Enable ADC interrupts
	ADCSRA |= (1 << ADIE);
  c0:	80 81       	ld	r24, Z
  c2:	88 60       	ori	r24, 0x08	; 8
  c4:	80 83       	st	Z, r24
	sei();
  c6:	78 94       	sei
	
	//Set the prescaler
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (0 << ADPS0) ; //64
  c8:	80 81       	ld	r24, Z
  ca:	86 60       	ori	r24, 0x06	; 6
  cc:	80 83       	st	Z, r24
	
	//Enable ADC
	ADCSRA |= (1 << ADEN); //Set ADEN bit to 1 to enable adc
  ce:	80 81       	ld	r24, Z
  d0:	80 68       	ori	r24, 0x80	; 128
  d2:	80 83       	st	Z, r24
	
	//start ADC conversion
	ADCSRA |= (1 << ADSC); // Set ADSC bit to 1 to start conversion
  d4:	80 81       	ld	r24, Z
  d6:	80 64       	ori	r24, 0x40	; 64
  d8:	80 83       	st	Z, r24
  da:	08 95       	ret

000000dc <init_devices>:


void init_devices(void)
{

	cli();
  dc:	f8 94       	cli

	port_init();
  de:	0e 94 48 00 	call	0x90	; 0x90 <port_init>
	
	adc_init();
  e2:	0e 94 4e 00 	call	0x9c	; 0x9c <adc_init>
	
	sei();
  e6:	78 94       	sei
  e8:	08 95       	ret

000000ea <start_conversion>:
	//start ADC conversion
	ADCSRA |= (1 << ADSC); // Set ADSC bit to 1 to start conversion
}

void start_conversion(void){
	ADCSRA |= (1 << ADSC);
  ea:	ea e7       	ldi	r30, 0x7A	; 122
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	80 81       	ld	r24, Z
  f0:	80 64       	ori	r24, 0x40	; 64
  f2:	80 83       	st	Z, r24
  f4:	08 95       	ret

000000f6 <__vector_21>:
}


ISR(ADC_vect)
{
  f6:	1f 92       	push	r1
  f8:	0f 92       	push	r0
  fa:	0f b6       	in	r0, 0x3f	; 63
  fc:	0f 92       	push	r0
  fe:	11 24       	eor	r1, r1
 100:	2f 93       	push	r18
 102:	3f 93       	push	r19
 104:	8f 93       	push	r24
 106:	9f 93       	push	r25
	//get ADC value
	adcValue = ADCL;
 108:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 10c:	28 2f       	mov	r18, r24
 10e:	30 e0       	ldi	r19, 0x00	; 0
 110:	30 93 02 01 	sts	0x0102, r19	; 0x800102 <adcValue+0x1>
 114:	20 93 01 01 	sts	0x0101, r18	; 0x800101 <adcValue>
	adcValue |= (uint16_t)ADCH<<8;
 118:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 11c:	89 2f       	mov	r24, r25
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	98 2f       	mov	r25, r24
 122:	88 27       	eor	r24, r24
 124:	82 2b       	or	r24, r18
 126:	93 2b       	or	r25, r19
 128:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <adcValue+0x1>
 12c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <adcValue>
	flag = 1; //conversion done
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
}
 136:	9f 91       	pop	r25
 138:	8f 91       	pop	r24
 13a:	3f 91       	pop	r19
 13c:	2f 91       	pop	r18
 13e:	0f 90       	pop	r0
 140:	0f be       	out	0x3f, r0	; 63
 142:	0f 90       	pop	r0
 144:	1f 90       	pop	r1
 146:	18 95       	reti

00000148 <pinSet>:
			
	}
}

void pinSet(volatile uint8_t *port, uint8_t pin){
	*port |=  1 << pin;
 148:	fc 01       	movw	r30, r24
 14a:	40 81       	ld	r20, Z
 14c:	21 e0       	ldi	r18, 0x01	; 1
 14e:	30 e0       	ldi	r19, 0x00	; 0
 150:	02 c0       	rjmp	.+4      	; 0x156 <pinSet+0xe>
 152:	22 0f       	add	r18, r18
 154:	33 1f       	adc	r19, r19
 156:	6a 95       	dec	r22
 158:	e2 f7       	brpl	.-8      	; 0x152 <pinSet+0xa>
 15a:	24 2b       	or	r18, r20
 15c:	20 83       	st	Z, r18
 15e:	08 95       	ret

00000160 <pinReset>:
}

void pinReset(volatile uint8_t *port, uint8_t pin){
 160:	fc 01       	movw	r30, r24
	*port &=  ~(1 << pin);
 162:	90 81       	ld	r25, Z
 164:	21 e0       	ldi	r18, 0x01	; 1
 166:	30 e0       	ldi	r19, 0x00	; 0
 168:	02 c0       	rjmp	.+4      	; 0x16e <pinReset+0xe>
 16a:	22 0f       	add	r18, r18
 16c:	33 1f       	adc	r19, r19
 16e:	6a 95       	dec	r22
 170:	e2 f7       	brpl	.-8      	; 0x16a <pinReset+0xa>
 172:	20 95       	com	r18
 174:	29 23       	and	r18, r25
 176:	20 83       	st	Z, r18
 178:	08 95       	ret

0000017a <main>:
	flag = 1; //conversion done
}

int main(void)
{
	init_devices();
 17a:	0e 94 6e 00 	call	0xdc	; 0xdc <init_devices>
	
	while(1)
	{
		if(flag == 1)
 17e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 182:	88 23       	and	r24, r24
 184:	e1 f3       	breq	.-8      	; 0x17e <main+0x4>
		{
			float voltage = ( adcValue * voltage_ref) / resValue; //conversion formula
 186:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <adcValue>
 18a:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <adcValue+0x1>
 18e:	9c 01       	movw	r18, r24
 190:	22 0f       	add	r18, r18
 192:	33 1f       	adc	r19, r19
 194:	22 0f       	add	r18, r18
 196:	33 1f       	adc	r19, r19
 198:	82 0f       	add	r24, r18
 19a:	93 1f       	adc	r25, r19
 19c:	c9 2f       	mov	r28, r25
 19e:	c6 95       	lsr	r28
 1a0:	c6 95       	lsr	r28
 1a2:	80 e0       	ldi	r24, 0x00	; 0
 1a4:	d8 2f       	mov	r29, r24
 1a6:	be 01       	movw	r22, r28
 1a8:	80 e0       	ldi	r24, 0x00	; 0
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	0e 94 ff 00 	call	0x1fe	; 0x1fe <__floatunsisf>
			if(voltage < compValue)
 1b0:	20 e0       	ldi	r18, 0x00	; 0
 1b2:	30 e0       	ldi	r19, 0x00	; 0
 1b4:	40 e4       	ldi	r20, 0x40	; 64
 1b6:	50 e4       	ldi	r21, 0x40	; 64
 1b8:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <__cmpsf2>
 1bc:	88 23       	and	r24, r24
 1be:	5c f4       	brge	.+22     	; 0x1d6 <main+0x5c>
			{
				pinSet(&PORT_LED0, PIN_LED0); //Turn on LED0
 1c0:	64 e0       	ldi	r22, 0x04	; 4
 1c2:	8b e2       	ldi	r24, 0x2B	; 43
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	0e 94 a4 00 	call	0x148	; 0x148 <pinSet>
				pinReset(&PORT_LED1, PIN_LED1); //Turn off LED1
 1ca:	65 e0       	ldi	r22, 0x05	; 5
 1cc:	8b e2       	ldi	r24, 0x2B	; 43
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	0e 94 b0 00 	call	0x160	; 0x160 <pinReset>
 1d4:	0a c0       	rjmp	.+20     	; 0x1ea <main+0x70>
			}
			else {
				pinSet(&PORT_LED1, PIN_LED1); //Turn on LED1
 1d6:	65 e0       	ldi	r22, 0x05	; 5
 1d8:	8b e2       	ldi	r24, 0x2B	; 43
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	0e 94 a4 00 	call	0x148	; 0x148 <pinSet>
				pinReset(&PORT_LED0, PIN_LED0); //Turn off LED0
 1e0:	64 e0       	ldi	r22, 0x04	; 4
 1e2:	8b e2       	ldi	r24, 0x2B	; 43
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	0e 94 b0 00 	call	0x160	; 0x160 <pinReset>
			}
			flag = 0;
 1ea:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
			start_conversion();
 1ee:	0e 94 75 00 	call	0xea	; 0xea <start_conversion>
 1f2:	c5 cf       	rjmp	.-118    	; 0x17e <main+0x4>

000001f4 <__cmpsf2>:
 1f4:	0e 94 3c 01 	call	0x278	; 0x278 <__fp_cmp>
 1f8:	08 f4       	brcc	.+2      	; 0x1fc <__cmpsf2+0x8>
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	08 95       	ret

000001fe <__floatunsisf>:
 1fe:	e8 94       	clt
 200:	09 c0       	rjmp	.+18     	; 0x214 <__floatsisf+0x12>

00000202 <__floatsisf>:
 202:	97 fb       	bst	r25, 7
 204:	3e f4       	brtc	.+14     	; 0x214 <__floatsisf+0x12>
 206:	90 95       	com	r25
 208:	80 95       	com	r24
 20a:	70 95       	com	r23
 20c:	61 95       	neg	r22
 20e:	7f 4f       	sbci	r23, 0xFF	; 255
 210:	8f 4f       	sbci	r24, 0xFF	; 255
 212:	9f 4f       	sbci	r25, 0xFF	; 255
 214:	99 23       	and	r25, r25
 216:	a9 f0       	breq	.+42     	; 0x242 <__floatsisf+0x40>
 218:	f9 2f       	mov	r31, r25
 21a:	96 e9       	ldi	r25, 0x96	; 150
 21c:	bb 27       	eor	r27, r27
 21e:	93 95       	inc	r25
 220:	f6 95       	lsr	r31
 222:	87 95       	ror	r24
 224:	77 95       	ror	r23
 226:	67 95       	ror	r22
 228:	b7 95       	ror	r27
 22a:	f1 11       	cpse	r31, r1
 22c:	f8 cf       	rjmp	.-16     	; 0x21e <__floatsisf+0x1c>
 22e:	fa f4       	brpl	.+62     	; 0x26e <__floatsisf+0x6c>
 230:	bb 0f       	add	r27, r27
 232:	11 f4       	brne	.+4      	; 0x238 <__floatsisf+0x36>
 234:	60 ff       	sbrs	r22, 0
 236:	1b c0       	rjmp	.+54     	; 0x26e <__floatsisf+0x6c>
 238:	6f 5f       	subi	r22, 0xFF	; 255
 23a:	7f 4f       	sbci	r23, 0xFF	; 255
 23c:	8f 4f       	sbci	r24, 0xFF	; 255
 23e:	9f 4f       	sbci	r25, 0xFF	; 255
 240:	16 c0       	rjmp	.+44     	; 0x26e <__floatsisf+0x6c>
 242:	88 23       	and	r24, r24
 244:	11 f0       	breq	.+4      	; 0x24a <__floatsisf+0x48>
 246:	96 e9       	ldi	r25, 0x96	; 150
 248:	11 c0       	rjmp	.+34     	; 0x26c <__floatsisf+0x6a>
 24a:	77 23       	and	r23, r23
 24c:	21 f0       	breq	.+8      	; 0x256 <__floatsisf+0x54>
 24e:	9e e8       	ldi	r25, 0x8E	; 142
 250:	87 2f       	mov	r24, r23
 252:	76 2f       	mov	r23, r22
 254:	05 c0       	rjmp	.+10     	; 0x260 <__floatsisf+0x5e>
 256:	66 23       	and	r22, r22
 258:	71 f0       	breq	.+28     	; 0x276 <__floatsisf+0x74>
 25a:	96 e8       	ldi	r25, 0x86	; 134
 25c:	86 2f       	mov	r24, r22
 25e:	70 e0       	ldi	r23, 0x00	; 0
 260:	60 e0       	ldi	r22, 0x00	; 0
 262:	2a f0       	brmi	.+10     	; 0x26e <__floatsisf+0x6c>
 264:	9a 95       	dec	r25
 266:	66 0f       	add	r22, r22
 268:	77 1f       	adc	r23, r23
 26a:	88 1f       	adc	r24, r24
 26c:	da f7       	brpl	.-10     	; 0x264 <__floatsisf+0x62>
 26e:	88 0f       	add	r24, r24
 270:	96 95       	lsr	r25
 272:	87 95       	ror	r24
 274:	97 f9       	bld	r25, 7
 276:	08 95       	ret

00000278 <__fp_cmp>:
 278:	99 0f       	add	r25, r25
 27a:	00 08       	sbc	r0, r0
 27c:	55 0f       	add	r21, r21
 27e:	aa 0b       	sbc	r26, r26
 280:	e0 e8       	ldi	r30, 0x80	; 128
 282:	fe ef       	ldi	r31, 0xFE	; 254
 284:	16 16       	cp	r1, r22
 286:	17 06       	cpc	r1, r23
 288:	e8 07       	cpc	r30, r24
 28a:	f9 07       	cpc	r31, r25
 28c:	c0 f0       	brcs	.+48     	; 0x2be <__fp_cmp+0x46>
 28e:	12 16       	cp	r1, r18
 290:	13 06       	cpc	r1, r19
 292:	e4 07       	cpc	r30, r20
 294:	f5 07       	cpc	r31, r21
 296:	98 f0       	brcs	.+38     	; 0x2be <__fp_cmp+0x46>
 298:	62 1b       	sub	r22, r18
 29a:	73 0b       	sbc	r23, r19
 29c:	84 0b       	sbc	r24, r20
 29e:	95 0b       	sbc	r25, r21
 2a0:	39 f4       	brne	.+14     	; 0x2b0 <__fp_cmp+0x38>
 2a2:	0a 26       	eor	r0, r26
 2a4:	61 f0       	breq	.+24     	; 0x2be <__fp_cmp+0x46>
 2a6:	23 2b       	or	r18, r19
 2a8:	24 2b       	or	r18, r20
 2aa:	25 2b       	or	r18, r21
 2ac:	21 f4       	brne	.+8      	; 0x2b6 <__fp_cmp+0x3e>
 2ae:	08 95       	ret
 2b0:	0a 26       	eor	r0, r26
 2b2:	09 f4       	brne	.+2      	; 0x2b6 <__fp_cmp+0x3e>
 2b4:	a1 40       	sbci	r26, 0x01	; 1
 2b6:	a6 95       	lsr	r26
 2b8:	8f ef       	ldi	r24, 0xFF	; 255
 2ba:	81 1d       	adc	r24, r1
 2bc:	81 1d       	adc	r24, r1
 2be:	08 95       	ret

000002c0 <_exit>:
 2c0:	f8 94       	cli

000002c2 <__stop_program>:
 2c2:	ff cf       	rjmp	.-2      	; 0x2c2 <__stop_program>
