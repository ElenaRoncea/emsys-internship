
Tema6_adc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000240  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001cc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000240  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000270  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  000002b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000815  00000000  00000000  00000300  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006b4  00000000  00000000  00000b15  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002ed  00000000  00000000  000011c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000cc  00000000  00000000  000014b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000391  00000000  00000000  00001584  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000cb  00000000  00000000  00001915  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  000019e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 91 00 	jmp	0x122	; 0x122 <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 75 00 	call	0xea	; 0xea <main>
  88:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <port_init>:
	sei();
}

void port_init(void)
{
	DDRB  = 0xFF;
  90:	8f ef       	ldi	r24, 0xFF	; 255
  92:	84 b9       	out	0x04, r24	; 4
	PORTB  = 0x00;
  94:	15 b8       	out	0x05, r1	; 5

	DDRC  = 0x00;
  96:	17 b8       	out	0x07, r1	; 7
	PORTC = 0x00;
  98:	18 b8       	out	0x08, r1	; 8
  9a:	08 95       	ret

0000009c <adc_init>:


void adc_init(void){
	
	//reset ADC registers
	ADMUX = 0x00;
  9c:	ac e7       	ldi	r26, 0x7C	; 124
  9e:	b0 e0       	ldi	r27, 0x00	; 0
  a0:	1c 92       	st	X, r1
	ADCSRA = 0x00;
  a2:	ea e7       	ldi	r30, 0x7A	; 122
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	10 82       	st	Z, r1
	
	//set the reference voltage to Avcc
	ADMUX |=  (1 << REFS0); // Set REFS0 bit to 1
  a8:	8c 91       	ld	r24, X
  aa:	80 64       	ori	r24, 0x40	; 64
  ac:	8c 93       	st	X, r24
	ADMUX &= ~(1 << REFS1); // Set REFS1 bit to 0
  ae:	8c 91       	ld	r24, X
  b0:	8f 77       	andi	r24, 0x7F	; 127
  b2:	8c 93       	st	X, r24
	ADMUX &=  ~(1 << ADLAR); // Set ADLAR bit to 0(left adjust the result)
  b4:	8c 91       	ld	r24, X
  b6:	8f 7d       	andi	r24, 0xDF	; 223
  b8:	8c 93       	st	X, r24
	
	//disable analog comparator
	ACSR |= (1 << ACD); // Set ACD bit(from ACSR) to 1 to disable the Analog Comparator
  ba:	80 b7       	in	r24, 0x30	; 48
  bc:	80 68       	ori	r24, 0x80	; 128
  be:	80 bf       	out	0x30, r24	; 48
	
	
	//Enable ADC interrupts
	ADCSRA |= (1 << ADIE);
  c0:	80 81       	ld	r24, Z
  c2:	88 60       	ori	r24, 0x08	; 8
  c4:	80 83       	st	Z, r24
	sei();
  c6:	78 94       	sei
	//Set the prescaler
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (0 << ADPS0) ; //64
  c8:	80 81       	ld	r24, Z
  ca:	86 60       	ori	r24, 0x06	; 6
  cc:	80 83       	st	Z, r24
	//Enable ADC
	ADCSRA |= (1 << ADEN); //Set ADEN bit to 1 to enable adc
  ce:	80 81       	ld	r24, Z
  d0:	80 68       	ori	r24, 0x80	; 128
  d2:	80 83       	st	Z, r24
	
	//start ADC conversion
	ADCSRA |= (1 << ADSC); // Set ADSC bit to 1 to start conversion
  d4:	80 81       	ld	r24, Z
  d6:	80 64       	ori	r24, 0x40	; 64
  d8:	80 83       	st	Z, r24
  da:	08 95       	ret

000000dc <init_devices>:
#define compValue_adc 450

void init_devices(void)
{

	cli();
  dc:	f8 94       	cli

	port_init();
  de:	0e 94 48 00 	call	0x90	; 0x90 <port_init>
	
	adc_init();
  e2:	0e 94 4e 00 	call	0x9c	; 0x9c <adc_init>
	
	sei();
  e6:	78 94       	sei
  e8:	08 95       	ret

000000ea <main>:
	ADCSRA |= (1 << ADSC); // Set ADSC bit to 1 to start conversion
}

int main(void)
{
	init_devices();
  ea:	0e 94 6e 00 	call	0xdc	; 0xdc <init_devices>
  ee:	ff cf       	rjmp	.-2      	; 0xee <main+0x4>

000000f0 <pinSet>:
	while(1);
}


void pinSet(volatile uint8_t *port, uint8_t pin){
	*port |=  1 << pin;
  f0:	fc 01       	movw	r30, r24
  f2:	40 81       	ld	r20, Z
  f4:	21 e0       	ldi	r18, 0x01	; 1
  f6:	30 e0       	ldi	r19, 0x00	; 0
  f8:	02 c0       	rjmp	.+4      	; 0xfe <pinSet+0xe>
  fa:	22 0f       	add	r18, r18
  fc:	33 1f       	adc	r19, r19
  fe:	6a 95       	dec	r22
 100:	e2 f7       	brpl	.-8      	; 0xfa <pinSet+0xa>
 102:	24 2b       	or	r18, r20
 104:	20 83       	st	Z, r18
 106:	08 95       	ret

00000108 <pinReset>:
}

void pinReset(volatile uint8_t *port, uint8_t pin){
 108:	fc 01       	movw	r30, r24
	*port &=  ~(1 << pin);
 10a:	90 81       	ld	r25, Z
 10c:	21 e0       	ldi	r18, 0x01	; 1
 10e:	30 e0       	ldi	r19, 0x00	; 0
 110:	02 c0       	rjmp	.+4      	; 0x116 <pinReset+0xe>
 112:	22 0f       	add	r18, r18
 114:	33 1f       	adc	r19, r19
 116:	6a 95       	dec	r22
 118:	e2 f7       	brpl	.-8      	; 0x112 <pinReset+0xa>
 11a:	20 95       	com	r18
 11c:	29 23       	and	r18, r25
 11e:	20 83       	st	Z, r18
 120:	08 95       	ret

00000122 <__vector_21>:
	ADCSRA |= (1 << ADSC); // Set ADSC bit to 1 to start conversion
}


ISR(ADC_vect)
{
 122:	1f 92       	push	r1
 124:	0f 92       	push	r0
 126:	0f b6       	in	r0, 0x3f	; 63
 128:	0f 92       	push	r0
 12a:	11 24       	eor	r1, r1
 12c:	2f 93       	push	r18
 12e:	3f 93       	push	r19
 130:	4f 93       	push	r20
 132:	5f 93       	push	r21
 134:	6f 93       	push	r22
 136:	7f 93       	push	r23
 138:	8f 93       	push	r24
 13a:	9f 93       	push	r25
 13c:	af 93       	push	r26
 13e:	bf 93       	push	r27
 140:	ef 93       	push	r30
 142:	ff 93       	push	r31
	adcValue = ADCL;
 144:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 148:	28 2f       	mov	r18, r24
 14a:	30 e0       	ldi	r19, 0x00	; 0
 14c:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 150:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__DATA_REGION_ORIGIN__>
	adcValue |= (uint16_t)ADCH<<8;
 154:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 158:	89 2f       	mov	r24, r25
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	98 2f       	mov	r25, r24
 15e:	88 27       	eor	r24, r24
 160:	82 2b       	or	r24, r18
 162:	93 2b       	or	r25, r19
 164:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 168:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	if(adcValue > compValue_adc)
 16c:	83 3c       	cpi	r24, 0xC3	; 195
 16e:	91 40       	sbci	r25, 0x01	; 1
 170:	58 f0       	brcs	.+22     	; 0x188 <__vector_21+0x66>
	{
		pinSet(&PORT_LED0, PIN_LED0);
 172:	64 e0       	ldi	r22, 0x04	; 4
 174:	8b e2       	ldi	r24, 0x2B	; 43
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	0e 94 78 00 	call	0xf0	; 0xf0 <pinSet>
		pinReset(&PORT_LED1, PIN_LED1);
 17c:	65 e0       	ldi	r22, 0x05	; 5
 17e:	8b e2       	ldi	r24, 0x2B	; 43
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	0e 94 84 00 	call	0x108	; 0x108 <pinReset>
 186:	0a c0       	rjmp	.+20     	; 0x19c <__vector_21+0x7a>
	}
	else {
		pinSet(&PORT_LED1, PIN_LED1);
 188:	65 e0       	ldi	r22, 0x05	; 5
 18a:	8b e2       	ldi	r24, 0x2B	; 43
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	0e 94 78 00 	call	0xf0	; 0xf0 <pinSet>
		pinReset(&PORT_LED0, PIN_LED0);
 192:	64 e0       	ldi	r22, 0x04	; 4
 194:	8b e2       	ldi	r24, 0x2B	; 43
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	0e 94 84 00 	call	0x108	; 0x108 <pinReset>
	}
	ADCSRA |= (1 << ADSC); // Set ADSC bit to 1 to start conversion
 19c:	ea e7       	ldi	r30, 0x7A	; 122
 19e:	f0 e0       	ldi	r31, 0x00	; 0
 1a0:	80 81       	ld	r24, Z
 1a2:	80 64       	ori	r24, 0x40	; 64
 1a4:	80 83       	st	Z, r24
}
 1a6:	ff 91       	pop	r31
 1a8:	ef 91       	pop	r30
 1aa:	bf 91       	pop	r27
 1ac:	af 91       	pop	r26
 1ae:	9f 91       	pop	r25
 1b0:	8f 91       	pop	r24
 1b2:	7f 91       	pop	r23
 1b4:	6f 91       	pop	r22
 1b6:	5f 91       	pop	r21
 1b8:	4f 91       	pop	r20
 1ba:	3f 91       	pop	r19
 1bc:	2f 91       	pop	r18
 1be:	0f 90       	pop	r0
 1c0:	0f be       	out	0x3f, r0	; 63
 1c2:	0f 90       	pop	r0
 1c4:	1f 90       	pop	r1
 1c6:	18 95       	reti

000001c8 <_exit>:
 1c8:	f8 94       	cli

000001ca <__stop_program>:
 1ca:	ff cf       	rjmp	.-2      	; 0x1ca <__stop_program>
