
Tema6_adc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000029e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000024a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000029e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002d0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000310  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000089d  00000000  00000000  00000350  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000075b  00000000  00000000  00000bed  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000344  00000000  00000000  00001348  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  0000168c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003f4  00000000  00000000  000016f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000c7  00000000  00000000  00001ae4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001bab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 84 00 	call	0x108	; 0x108 <main>
  78:	0c 94 23 01 	jmp	0x246	; 0x246 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <port_init>:
}

void port_init(void)
{

	DDRD  = 0xFF;
  80:	8f ef       	ldi	r24, 0xFF	; 255
  82:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x00;
  84:	1b b8       	out	0x0b, r1	; 11
	
	DDRC  = 0x00;
  86:	17 b8       	out	0x07, r1	; 7
	PORTC = 0x00;
  88:	18 b8       	out	0x08, r1	; 8
  8a:	08 95       	ret

0000008c <adc_init>:


void adc_init(void){
	
	//reset ADC registers
	ADMUX = 0x00;
  8c:	ac e7       	ldi	r26, 0x7C	; 124
  8e:	b0 e0       	ldi	r27, 0x00	; 0
  90:	1c 92       	st	X, r1
	ADCSRA = 0x00;
  92:	ea e7       	ldi	r30, 0x7A	; 122
  94:	f0 e0       	ldi	r31, 0x00	; 0
  96:	10 82       	st	Z, r1
	
	//set the reference voltage to Avcc
	ADMUX |=  (1 << REFS0); // Set REFS0 bit to 1
  98:	8c 91       	ld	r24, X
  9a:	80 64       	ori	r24, 0x40	; 64
  9c:	8c 93       	st	X, r24
	ADMUX &= ~(1 << REFS1); // Set REFS1 bit to 0
  9e:	8c 91       	ld	r24, X
  a0:	8f 77       	andi	r24, 0x7F	; 127
  a2:	8c 93       	st	X, r24
	ADMUX &=  ~(1 << ADLAR); // Set ADLAR bit to 0(left adjust the result)
  a4:	8c 91       	ld	r24, X
  a6:	8f 7d       	andi	r24, 0xDF	; 223
  a8:	8c 93       	st	X, r24
	
	//disable analog comparator
	ACSR |= (1 << ACD); // Set ACD bit(from ACSR) to 1 to disable the Analog Comparator
  aa:	80 b7       	in	r24, 0x30	; 48
  ac:	80 68       	ori	r24, 0x80	; 128
  ae:	80 bf       	out	0x30, r24	; 48
	
	//Enable ADC
	ADCSRA |= (1 << ADEN); //Set ADEN bit to 1 to enable adc
  b0:	80 81       	ld	r24, Z
  b2:	80 68       	ori	r24, 0x80	; 128
  b4:	80 83       	st	Z, r24
	
	//Enable ADC interrupts
	ADCSRA |= (1 << ADIE);
  b6:	80 81       	ld	r24, Z
  b8:	88 60       	ori	r24, 0x08	; 8
  ba:	80 83       	st	Z, r24
	
	//Set the prescaler
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (0 << ADPS0); //64
  bc:	80 81       	ld	r24, Z
  be:	86 60       	ori	r24, 0x06	; 6
  c0:	80 83       	st	Z, r24
  c2:	08 95       	ret

000000c4 <init_devices>:
}


void init_devices(void)
{
	port_init();
  c4:	0e 94 40 00 	call	0x80	; 0x80 <port_init>
	adc_init();
  c8:	0e 94 46 00 	call	0x8c	; 0x8c <adc_init>
  cc:	08 95       	ret

000000ce <ADC_read>:
uint16_t ADC_read(uint8_t channel)
{
	
	uint16_t ADC_result;
	//select ADC input channels(canalele multiplexorului)
	ADMUX = (ADMUX & 0xF0) | (channel & 0x0F); 
  ce:	ec e7       	ldi	r30, 0x7C	; 124
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	90 81       	ld	r25, Z
  d4:	90 7f       	andi	r25, 0xF0	; 240
  d6:	8f 70       	andi	r24, 0x0F	; 15
  d8:	89 2b       	or	r24, r25
  da:	80 83       	st	Z, r24
	
	//start ADC conversion
	ADCSRA |= (1 << ADSC); // Set ADSC bit to 1 to start conversion
  dc:	ea e7       	ldi	r30, 0x7A	; 122
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	80 81       	ld	r24, Z
  e2:	80 64       	ori	r24, 0x40	; 64
  e4:	80 83       	st	Z, r24
	
	while (ADCSRA & (1 << ADSC)); // Wait for ADC conversion to complete  
  e6:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  ea:	86 fd       	sbrc	r24, 6
  ec:	fc cf       	rjmp	.-8      	; 0xe6 <ADC_read+0x18>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ee:	85 e3       	ldi	r24, 0x35	; 53
  f0:	8a 95       	dec	r24
  f2:	f1 f7       	brne	.-4      	; 0xf0 <ADC_read+0x22>
  f4:	00 00       	nop
	//ALTA MODALITATE while((ADCSRA&(1<<ADIF))==0);	/* Monitor end of conversion interrupt */
	
	_delay_us(10);
	ADC_result  = (uint16_t)ADCL;
  f6:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
	ADC_result |= (uint16_t)ADCH<<8;
  fa:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	98 2f       	mov	r25, r24
 102:	88 27       	eor	r24, r24
	
	return ADC_result; // Return ADC result
}
 104:	82 2b       	or	r24, r18
 106:	08 95       	ret

00000108 <main>:

uint16_t ADC_read(uint8_t);

int main(void)
{
	init_devices();
 108:	0e 94 62 00 	call	0xc4	; 0xc4 <init_devices>
	
	while (1)
	{
		PORTD ^= 1 << PIN_LED2;
 10c:	9b b1       	in	r25, 0x0b	; 11
 10e:	80 e4       	ldi	r24, 0x40	; 64
 110:	89 27       	eor	r24, r25
 112:	8b b9       	out	0x0b, r24	; 11
		uint16_t adcValue = ADC_read(0); //Read ADC value from ADC0 (PORTF0)
 114:	80 e0       	ldi	r24, 0x00	; 0
 116:	0e 94 67 00 	call	0xce	; 0xce <ADC_read>
		float voltage = (adcValue * 5) / 1024; // Convert ADC value to voltage (assuming Vref = 5V and 10-bit ADC)
 11a:	9c 01       	movw	r18, r24
 11c:	22 0f       	add	r18, r18
 11e:	33 1f       	adc	r19, r19
 120:	22 0f       	add	r18, r18
 122:	33 1f       	adc	r19, r19
 124:	82 0f       	add	r24, r18
 126:	93 1f       	adc	r25, r19
 128:	c9 2f       	mov	r28, r25
 12a:	c6 95       	lsr	r28
 12c:	c6 95       	lsr	r28
 12e:	20 e0       	ldi	r18, 0x00	; 0
 130:	d2 2f       	mov	r29, r18
 132:	be 01       	movw	r22, r28
 134:	80 e0       	ldi	r24, 0x00	; 0
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	0e 94 c2 00 	call	0x184	; 0x184 <__floatunsisf>
		
		if (voltage < 4)
 13c:	20 e0       	ldi	r18, 0x00	; 0
 13e:	30 e0       	ldi	r19, 0x00	; 0
 140:	40 e8       	ldi	r20, 0x80	; 128
 142:	50 e4       	ldi	r21, 0x40	; 64
 144:	0e 94 bd 00 	call	0x17a	; 0x17a <__cmpsf2>
 148:	88 23       	and	r24, r24
 14a:	3c f4       	brge	.+14     	; 0x15a <main+0x52>
		{
			PORTD |= (1 << PIN_LED0); //Turn on LED0
 14c:	8b b1       	in	r24, 0x0b	; 11
 14e:	80 61       	ori	r24, 0x10	; 16
 150:	8b b9       	out	0x0b, r24	; 11
			PORTD &= ~(1 << PIN_LED1); //Turn off LED1
 152:	8b b1       	in	r24, 0x0b	; 11
 154:	8f 7d       	andi	r24, 0xDF	; 223
 156:	8b b9       	out	0x0b, r24	; 11
 158:	06 c0       	rjmp	.+12     	; 0x166 <main+0x5e>
		}
		else
		{
			PORTD &= ~(1 << PIN_LED0); //Turn off LED0
 15a:	8b b1       	in	r24, 0x0b	; 11
 15c:	8f 7e       	andi	r24, 0xEF	; 239
 15e:	8b b9       	out	0x0b, r24	; 11
			PORTD |= (1 << PIN_LED1); //Turn on LED1
 160:	8b b1       	in	r24, 0x0b	; 11
 162:	80 62       	ori	r24, 0x20	; 32
 164:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 166:	8f ef       	ldi	r24, 0xFF	; 255
 168:	99 e6       	ldi	r25, 0x69	; 105
 16a:	28 e1       	ldi	r18, 0x18	; 24
 16c:	81 50       	subi	r24, 0x01	; 1
 16e:	90 40       	sbci	r25, 0x00	; 0
 170:	20 40       	sbci	r18, 0x00	; 0
 172:	e1 f7       	brne	.-8      	; 0x16c <main+0x64>
 174:	00 c0       	rjmp	.+0      	; 0x176 <main+0x6e>
 176:	00 00       	nop
 178:	c9 cf       	rjmp	.-110    	; 0x10c <main+0x4>

0000017a <__cmpsf2>:
 17a:	0e 94 ff 00 	call	0x1fe	; 0x1fe <__fp_cmp>
 17e:	08 f4       	brcc	.+2      	; 0x182 <__cmpsf2+0x8>
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	08 95       	ret

00000184 <__floatunsisf>:
 184:	e8 94       	clt
 186:	09 c0       	rjmp	.+18     	; 0x19a <__floatsisf+0x12>

00000188 <__floatsisf>:
 188:	97 fb       	bst	r25, 7
 18a:	3e f4       	brtc	.+14     	; 0x19a <__floatsisf+0x12>
 18c:	90 95       	com	r25
 18e:	80 95       	com	r24
 190:	70 95       	com	r23
 192:	61 95       	neg	r22
 194:	7f 4f       	sbci	r23, 0xFF	; 255
 196:	8f 4f       	sbci	r24, 0xFF	; 255
 198:	9f 4f       	sbci	r25, 0xFF	; 255
 19a:	99 23       	and	r25, r25
 19c:	a9 f0       	breq	.+42     	; 0x1c8 <__floatsisf+0x40>
 19e:	f9 2f       	mov	r31, r25
 1a0:	96 e9       	ldi	r25, 0x96	; 150
 1a2:	bb 27       	eor	r27, r27
 1a4:	93 95       	inc	r25
 1a6:	f6 95       	lsr	r31
 1a8:	87 95       	ror	r24
 1aa:	77 95       	ror	r23
 1ac:	67 95       	ror	r22
 1ae:	b7 95       	ror	r27
 1b0:	f1 11       	cpse	r31, r1
 1b2:	f8 cf       	rjmp	.-16     	; 0x1a4 <__floatsisf+0x1c>
 1b4:	fa f4       	brpl	.+62     	; 0x1f4 <__floatsisf+0x6c>
 1b6:	bb 0f       	add	r27, r27
 1b8:	11 f4       	brne	.+4      	; 0x1be <__floatsisf+0x36>
 1ba:	60 ff       	sbrs	r22, 0
 1bc:	1b c0       	rjmp	.+54     	; 0x1f4 <__floatsisf+0x6c>
 1be:	6f 5f       	subi	r22, 0xFF	; 255
 1c0:	7f 4f       	sbci	r23, 0xFF	; 255
 1c2:	8f 4f       	sbci	r24, 0xFF	; 255
 1c4:	9f 4f       	sbci	r25, 0xFF	; 255
 1c6:	16 c0       	rjmp	.+44     	; 0x1f4 <__floatsisf+0x6c>
 1c8:	88 23       	and	r24, r24
 1ca:	11 f0       	breq	.+4      	; 0x1d0 <__floatsisf+0x48>
 1cc:	96 e9       	ldi	r25, 0x96	; 150
 1ce:	11 c0       	rjmp	.+34     	; 0x1f2 <__floatsisf+0x6a>
 1d0:	77 23       	and	r23, r23
 1d2:	21 f0       	breq	.+8      	; 0x1dc <__floatsisf+0x54>
 1d4:	9e e8       	ldi	r25, 0x8E	; 142
 1d6:	87 2f       	mov	r24, r23
 1d8:	76 2f       	mov	r23, r22
 1da:	05 c0       	rjmp	.+10     	; 0x1e6 <__floatsisf+0x5e>
 1dc:	66 23       	and	r22, r22
 1de:	71 f0       	breq	.+28     	; 0x1fc <__floatsisf+0x74>
 1e0:	96 e8       	ldi	r25, 0x86	; 134
 1e2:	86 2f       	mov	r24, r22
 1e4:	70 e0       	ldi	r23, 0x00	; 0
 1e6:	60 e0       	ldi	r22, 0x00	; 0
 1e8:	2a f0       	brmi	.+10     	; 0x1f4 <__floatsisf+0x6c>
 1ea:	9a 95       	dec	r25
 1ec:	66 0f       	add	r22, r22
 1ee:	77 1f       	adc	r23, r23
 1f0:	88 1f       	adc	r24, r24
 1f2:	da f7       	brpl	.-10     	; 0x1ea <__floatsisf+0x62>
 1f4:	88 0f       	add	r24, r24
 1f6:	96 95       	lsr	r25
 1f8:	87 95       	ror	r24
 1fa:	97 f9       	bld	r25, 7
 1fc:	08 95       	ret

000001fe <__fp_cmp>:
 1fe:	99 0f       	add	r25, r25
 200:	00 08       	sbc	r0, r0
 202:	55 0f       	add	r21, r21
 204:	aa 0b       	sbc	r26, r26
 206:	e0 e8       	ldi	r30, 0x80	; 128
 208:	fe ef       	ldi	r31, 0xFE	; 254
 20a:	16 16       	cp	r1, r22
 20c:	17 06       	cpc	r1, r23
 20e:	e8 07       	cpc	r30, r24
 210:	f9 07       	cpc	r31, r25
 212:	c0 f0       	brcs	.+48     	; 0x244 <__fp_cmp+0x46>
 214:	12 16       	cp	r1, r18
 216:	13 06       	cpc	r1, r19
 218:	e4 07       	cpc	r30, r20
 21a:	f5 07       	cpc	r31, r21
 21c:	98 f0       	brcs	.+38     	; 0x244 <__fp_cmp+0x46>
 21e:	62 1b       	sub	r22, r18
 220:	73 0b       	sbc	r23, r19
 222:	84 0b       	sbc	r24, r20
 224:	95 0b       	sbc	r25, r21
 226:	39 f4       	brne	.+14     	; 0x236 <__fp_cmp+0x38>
 228:	0a 26       	eor	r0, r26
 22a:	61 f0       	breq	.+24     	; 0x244 <__fp_cmp+0x46>
 22c:	23 2b       	or	r18, r19
 22e:	24 2b       	or	r18, r20
 230:	25 2b       	or	r18, r21
 232:	21 f4       	brne	.+8      	; 0x23c <__fp_cmp+0x3e>
 234:	08 95       	ret
 236:	0a 26       	eor	r0, r26
 238:	09 f4       	brne	.+2      	; 0x23c <__fp_cmp+0x3e>
 23a:	a1 40       	sbci	r26, 0x01	; 1
 23c:	a6 95       	lsr	r26
 23e:	8f ef       	ldi	r24, 0xFF	; 255
 240:	81 1d       	adc	r24, r1
 242:	81 1d       	adc	r24, r1
 244:	08 95       	ret

00000246 <_exit>:
 246:	f8 94       	cli

00000248 <__stop_program>:
 248:	ff cf       	rjmp	.-2      	; 0x248 <__stop_program>
