
Tema3_isr.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000013a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  000001ae  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001ae  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000220  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007e8  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000073b  00000000  00000000  00000a48  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002ee  00000000  00000000  00001183  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000074  00000000  00000000  00001474  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003c6  00000000  00000000  000014e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000084  00000000  00000000  000018ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001932  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__vector_1>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 6b 00 	call	0xd6	; 0xd6 <main>
  88:	0c 94 9b 00 	jmp	0x136	; 0x136 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <pinToggle>:
		}
	}
}
void pinToggle(volatile uint8_t *port, uint8_t pin)
{
	*port ^= 1 << pin;
  90:	fc 01       	movw	r30, r24
  92:	40 81       	ld	r20, Z
  94:	21 e0       	ldi	r18, 0x01	; 1
  96:	30 e0       	ldi	r19, 0x00	; 0
  98:	02 c0       	rjmp	.+4      	; 0x9e <pinToggle+0xe>
  9a:	22 0f       	add	r18, r18
  9c:	33 1f       	adc	r19, r19
  9e:	6a 95       	dec	r22
  a0:	e2 f7       	brpl	.-8      	; 0x9a <pinToggle+0xa>
  a2:	24 27       	eor	r18, r20
  a4:	20 83       	st	Z, r18
  a6:	08 95       	ret

000000a8 <init_devices>:
}

void init_devices(void)
{
	// -- LED-urile ca OUTPUT -- //
	DDRD |= (1 << PIN_LED0) | (1 << PIN_LED1);
  a8:	8a b1       	in	r24, 0x0a	; 10
  aa:	80 63       	ori	r24, 0x30	; 48
  ac:	8a b9       	out	0x0a, r24	; 10
	// ------------------------  //

	// -- Butonul ca INPUT -- //
	DDRD &= ~(1 << PIN_BUTTON);
  ae:	8a b1       	in	r24, 0x0a	; 10
  b0:	8b 7f       	andi	r24, 0xFB	; 251
  b2:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1 << PIN_BUTTON);  // asta activeaza rezistenta de pull - up
  b4:	8b b1       	in	r24, 0x0b	; 11
  b6:	84 60       	ori	r24, 0x04	; 4
  b8:	8b b9       	out	0x0b, r24	; 11
	// ------------------------  //

	// -- Activam LED-ul 0 -- //
	PORTD |= (1 << PIN_LED0);
  ba:	8b b1       	in	r24, 0x0b	; 11
  bc:	80 61       	ori	r24, 0x10	; 16
  be:	8b b9       	out	0x0b, r24	; 11
  c0:	08 95       	ret

000000c2 <init_intr>:


void init_intr(){
	
	// -- Intrerupere pe falling edge (apasare de buton) -- //
	EICRA |= (1 << ISC00) | (1<<ISC01);
  c2:	e9 e6       	ldi	r30, 0x69	; 105
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 81       	ld	r24, Z
  c8:	83 60       	ori	r24, 0x03	; 3
  ca:	80 83       	st	Z, r24
	// --------------------------------------------------- //

	// -- Activeaza intreruperea externa 0 -- //
	EIMSK |= (1 << INT0);
  cc:	8d b3       	in	r24, 0x1d	; 29
  ce:	81 60       	ori	r24, 0x01	; 1
  d0:	8d bb       	out	0x1d, r24	; 29
	// ------------------------------------- //

	// -- Functie care activeaza intreruperea globala -- //
	sei();
  d2:	78 94       	sei
  d4:	08 95       	ret

000000d6 <main>:

volatile bool buton = false;

int main(void)
{
	init_devices();
  d6:	0e 94 54 00 	call	0xa8	; 0xa8 <init_devices>
	init_intr();
  da:	0e 94 61 00 	call	0xc2	; 0xc2 <init_intr>
	while(1){
		pinToggle(&PORT_LED0, PIN_LED0);
  de:	64 e0       	ldi	r22, 0x04	; 4
  e0:	8b e2       	ldi	r24, 0x2B	; 43
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	0e 94 48 00 	call	0x90	; 0x90 <pinToggle>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e8:	2f ef       	ldi	r18, 0xFF	; 255
  ea:	89 e6       	ldi	r24, 0x69	; 105
  ec:	98 e1       	ldi	r25, 0x18	; 24
  ee:	21 50       	subi	r18, 0x01	; 1
  f0:	80 40       	sbci	r24, 0x00	; 0
  f2:	90 40       	sbci	r25, 0x00	; 0
  f4:	e1 f7       	brne	.-8      	; 0xee <main+0x18>
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <main+0x22>
  f8:	00 00       	nop
		_delay_ms(500);
		if (buton){
  fa:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  fe:	88 23       	and	r24, r24
 100:	31 f0       	breq	.+12     	; 0x10e <main+0x38>
			PORT_LED1 |= (1 << PIN_LED1);
 102:	8b b1       	in	r24, 0x0b	; 11
 104:	80 62       	ori	r24, 0x20	; 32
 106:	8b b9       	out	0x0b, r24	; 11
			buton = false;
 108:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 10c:	e8 cf       	rjmp	.-48     	; 0xde <main+0x8>
		}
		else{
			PORT_LED1 &= ~(1 << PIN_LED1);
 10e:	8b b1       	in	r24, 0x0b	; 11
 110:	8f 7d       	andi	r24, 0xDF	; 223
 112:	8b b9       	out	0x0b, r24	; 11
 114:	e4 cf       	rjmp	.-56     	; 0xde <main+0x8>

00000116 <__vector_1>:
	// ------------------------------------------------ //

	
}
ISR(INT0_vect)
{
 116:	1f 92       	push	r1
 118:	0f 92       	push	r0
 11a:	0f b6       	in	r0, 0x3f	; 63
 11c:	0f 92       	push	r0
 11e:	11 24       	eor	r1, r1
 120:	8f 93       	push	r24
	// -- Citim starea butonului (vezi ca e volatile pentru a-i spune compilatorului sa nu retina valoarea (sa o cache-uiasca) si sa o citeasca mereu) -- //

	// -- Aici e conditia pentru a porni LED-ul 1 in cazul in care butonul a fost apasat -- //
	if ((PIND, PIN_BUTTON)) {
 122:	89 b1       	in	r24, 0x09	; 9
		buton = true;
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		} else {
		buton = false;
	}
	// ----------------------------------------------------------------------------------- //
 12a:	8f 91       	pop	r24
 12c:	0f 90       	pop	r0
 12e:	0f be       	out	0x3f, r0	; 63
 130:	0f 90       	pop	r0
 132:	1f 90       	pop	r1
 134:	18 95       	reti

00000136 <_exit>:
 136:	f8 94       	cli

00000138 <__stop_program>:
 138:	ff cf       	rjmp	.-2      	; 0x138 <__stop_program>
